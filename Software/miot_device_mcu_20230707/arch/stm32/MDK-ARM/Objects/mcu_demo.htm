<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\mcu_demo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\mcu_demo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Wed Jul 12 11:57:14 2023
<BR><P>
<H3>Maximum Stack Usage =       2664 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; miio_command_handle_loop &rArr; send_error &rArr; do_req_error &rArr; send_error_code &rArr; str_n_cat &rArr; strncat
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f10x_it.o(i.BusFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f10x_it.o(i.DebugMon_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f10x_it.o(i.HardFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f10x_it.o(i.MemManage_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f10x_it.o(i.NMI_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f10x_it.o(i.PendSV_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f10x_it.o(i.SVC_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f10x_it.o(i.SysTick_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from usart.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from arch_uart.o(i.USART2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f10x_it.o(i.UsageFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[57]">_Xmodem_recv_str</a> from arch_uart.o(i._Xmodem_recv_str) referenced from miio_api.o(i.miio_instance_add_uart)
 <LI><a href="#[48]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[54]">_miio_cmd_ack</a> from miio_api.o(i._miio_cmd_ack) referenced from miio_api.o(i.miio_command_handle_loop)
 <LI><a href="#[54]">_miio_cmd_ack</a> from miio_api.o(i._miio_cmd_ack) referenced from miio_api.o(i.send_error)
 <LI><a href="#[4a]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[49]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[4d]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[5b]">_uart_init</a> from arch_uart.o(i._uart_init) referenced from miio_api.o(i.miio_instance_add_uart)
 <LI><a href="#[55]">_uart_recv_byte</a> from arch_uart.o(i._uart_recv_byte) referenced from miio_api.o(i.miio_instance_add_uart)
 <LI><a href="#[58]">_uart_recv_str</a> from arch_uart.o(i._uart_recv_str) referenced from miio_api.o(i.miio_instance_add_uart)
 <LI><a href="#[56]">_uart_send_byte</a> from arch_uart.o(i._uart_send_byte) referenced from miio_api.o(i.miio_instance_add_uart)
 <LI><a href="#[5a]">_uart_send_str</a> from arch_uart.o(i._uart_send_str) referenced from miio_api.o(i.miio_instance_add_uart)
 <LI><a href="#[59]">_uart_send_str_wait_ack</a> from arch_uart.o(i._uart_send_str_wait_ack) referenced from miio_api.o(i.miio_instance_add_uart)
 <LI><a href="#[4f]">do_get_properties</a> from main.o(i.do_get_properties) referenced from main.o(i.main)
 <LI><a href="#[52]">do_invoke_action</a> from main.o(i.do_invoke_action) referenced from main.o(i.main)
 <LI><a href="#[4e]">do_invoke_none</a> from main.o(i.do_invoke_none) referenced from main.o(i.main)
 <LI><a href="#[51]">do_invoke_ota</a> from main.o(i.do_invoke_ota) referenced from main.o(i.main)
 <LI><a href="#[53]">do_net_changed</a> from main.o(i.do_net_changed) referenced from main.o(i.main)
 <LI><a href="#[50]">do_set_properties</a> from main.o(i.do_set_properties) referenced from main.o(i.main)
 <LI><a href="#[4c]">fputc</a> from usart.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[4b]">isspace</a> from isspace_o.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[46]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[48]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[110]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[5c]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[79]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[111]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[112]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[113]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[114]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[115]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[61]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[4b]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[c1]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem_recv_data
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_property_operation
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_action_invocation
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_property_operation_decode
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_operation_decode
</UL>

<P><STRONG><a name="[fe]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_instance_destroy
</UL>

<P><STRONG><a name="[116]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[117]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[118]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_recv_str
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_command_handle_loop
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_property_operation_decode
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_operation_decode
</UL>

<P><STRONG><a name="[bd]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_func_restore
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_send_str_wait_ack
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_instance_create
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_command_handle_loop
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_property_operation
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_action_invocation
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;property_value_new
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arguments_new
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_get_value
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_operation_new
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_operation_encode_param
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_code
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error
</UL>

<P><STRONG><a name="[119]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[cd]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;property_operation_encode_tail
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_operation_encode_tail
</UL>

<P><STRONG><a name="[f3]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;property_value_new_string
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_cmd_method_register
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_get_value
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_comamnd_decoder
</UL>

<P><STRONG><a name="[dd]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_net_changed
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_get_value
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_action_get_arguments_in
</UL>

<P><STRONG><a name="[bc]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;property_value_new_string
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_send_str_wait_ack
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_send_str
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_get_value
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_n_cat
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;property_operation_encode_tail
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;property_operation_encode_param
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_operation_encode_tail
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_operation_encode_param
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_send_response
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_comamnd_decoder
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_req_error
</UL>

<P><STRONG><a name="[f5]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_command_handle_loop
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_command_find_by_method
</UL>

<P><STRONG><a name="[ca]"></a>strncat</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, strncat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncat
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_n_cat
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;property_operation_encode_param
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_operation_encode_param
</UL>

<P><STRONG><a name="[be]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_send_str_wait_ack
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_get_value
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_action_get_arguments_in
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_comamnd_decoder
</UL>

<P><STRONG><a name="[c2]"></a>strtok</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, strtok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_property_operation
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_action_invocation
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_property_operation_decode
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_operation_decode
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_comamnd_decoder
</UL>

<P><STRONG><a name="[65]"></a>calloc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, calloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_property_operation
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_action_invocation
</UL>

<P><STRONG><a name="[67]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_get_value
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_action_get_arguments_in
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_property_operation_decode
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_operation_decode
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6e]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[6f]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[70]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[cb]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;property_operation_encode_param
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_operation_encode_param
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_get_value
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_action_get_arguments_in
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[11a]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[60]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[11b]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[11c]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[11d]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>__strtod_int</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[69]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[11e]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[11f]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[6c]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ae]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[5d]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[120]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[7c]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[49]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[4a]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[77]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[7e]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[7b]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_PWM_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[104]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_app_main
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>KEY_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, key.o(i.KEY_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KEY_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_app_main
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b7]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[d2]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_mcu_init
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b6]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_init
</UL>

<P><STRONG><a name="[80]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_PWM_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[90]"></a>RCC_DeInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[a6]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[92]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[99]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_GetSYSCLKSource))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[93]"></a>RCC_HCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_HCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[91]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_HSICmd))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[94]"></a>RCC_PCLK1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PCLK1Config))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[95]"></a>RCC_PCLK2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PCLK2Config))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[97]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PLLCmd))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[96]"></a>RCC_PLLConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PLLConfig))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[98]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_SYSCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>S_1_DeviceInformation_doGet</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, s_1_deviceinformation_doget.o(i.S_1_DeviceInformation_doGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = S_1_DeviceInformation_doGet &rArr; P_1_5_SerialNo_doGet &rArr; property_value_new_string &rArr; property_value_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_1_5_SerialNo_doGet
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_1_4_FirmwareRevision_doGet
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_1_3_SerialNumber_doGet
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_1_2_Model_doGet
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_1_1_Manufacturer_doGet
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_property_get
</UL>

<P><STRONG><a name="[8e]"></a>S_2_SwitchSensor_doGet</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, s_2_switchsensor_doget.o(i.S_2_SwitchSensor_doGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = S_2_SwitchSensor_doGet &rArr; P_2_4_On_doGet &rArr; property_value_new_boolean &rArr; property_value_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_2_4_On_doGet
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_property_get
</UL>

<P><STRONG><a name="[8f]"></a>S_2_SwitchSensor_doSet</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, s_2_switchsensor_doset.o(i.S_2_SwitchSensor_doSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = S_2_SwitchSensor_doSet &rArr; P_2_4_On_doSet
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_2_4_On_doSet
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_property_set
</UL>

<P><STRONG><a name="[d8]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(i.SysTick_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SystemInit</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK2Config
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK1Config
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSICmd
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKConfig
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSYSCLKSource
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[9a]"></a>TIM1_PWM_Init</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, servo.o(i.TIM1_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TIM1_PWM_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_app_main
</UL>

<P><STRONG><a name="[9f]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ARRPreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_PWM_Init
</UL>

<P><STRONG><a name="[a0]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_PWM_Init
</UL>

<P><STRONG><a name="[9d]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_CtrlPWMOutputs))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_PWM_Init
</UL>

<P><STRONG><a name="[9c]"></a>TIM_OC1Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_PWM_Init
</UL>

<P><STRONG><a name="[9e]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_OC1PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_PWM_Init
</UL>

<P><STRONG><a name="[8b]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetCompare1))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_2_4_On_doSet
</UL>

<P><STRONG><a name="[9b]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_PWM_Init
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, usart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, arch_uart.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART2_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_ringbuff
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[b9]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[ba]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_send_str_wait_ack
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_send_str
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_send_byte
</UL>

<P><STRONG><a name="[a1]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[b8]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_interrupt
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[a5]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[a2]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[bb]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_send_str_wait_ack
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_send_str
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_send_byte
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>_Xmodem_recv_str</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, arch_uart.o(i._Xmodem_recv_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _Xmodem_recv_str &rArr; _read_ringbuff &rArr; _uart_interrupt &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_ringbuff
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_os_mutex_put
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_os_mutex_get
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> miio_api.o(i.miio_instance_add_uart)
</UL>
<P><STRONG><a name="[aa]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[121]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[b0]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_func_restore
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_property_set
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_property_get
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_action_invoke
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_xmodem_create_instance
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem_print_packno_error
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem_print_header_info
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem_print_data
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem_print_crc_error
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem_recv_data
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_send_str_wait_ack
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_send_str
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_send_byte
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_recv_str
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_instance_destroy
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_instance_create
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_command_handle_loop
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_cmd_method_register
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_property_operation
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_action_invocation
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_end
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_mcu_init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_properties
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_net_changed
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_invoke_ota
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_invoke_none
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_invoke_action
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_get_properties
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;property_operation_encode_tail
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_property_operation_decode
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_operation_encode_tail
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_operation_decode
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_uart_destroy
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_miio_cmd_ack
</UL>

<P><STRONG><a name="[122]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[123]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[ac]"></a>__0snprintf</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[124]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[c8]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;property_operation_encode_param
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_operation_encode_param
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error
</UL>

<P><STRONG><a name="[125]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[126]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[68]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[127]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[d6]"></a>__read_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__read_errno))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[128]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[129]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[12a]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[d7]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[7d]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[a8]"></a>_read_ringbuff</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, miio_uart.o(i._read_ringbuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _read_ringbuff &rArr; _uart_interrupt &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_recv_str
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Xmodem_recv_str
</UL>

<P><STRONG><a name="[5b]"></a>_uart_init</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, arch_uart.o(i._uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = _uart_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> miio_api.o(i.miio_instance_add_uart)
</UL>
<P><STRONG><a name="[b5]"></a>_uart_interrupt</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, arch_uart.o(i._uart_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _uart_interrupt &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_ringbuff
</UL>

<P><STRONG><a name="[55]"></a>_uart_recv_byte</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, arch_uart.o(i._uart_recv_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _uart_recv_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_os_mutex_put
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_os_mutex_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> miio_api.o(i.miio_instance_add_uart)
</UL>
<P><STRONG><a name="[58]"></a>_uart_recv_str</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, arch_uart.o(i._uart_recv_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = _uart_recv_str &rArr; _read_ringbuff &rArr; _uart_interrupt &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_ringbuff
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_os_mutex_put
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_os_mutex_get
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_end
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_begin
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> miio_api.o(i.miio_instance_add_uart)
</UL>
<P><STRONG><a name="[56]"></a>_uart_send_byte</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, arch_uart.o(i._uart_send_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _uart_send_byte &rArr; arch_printf_end &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_os_mutex_put
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_os_mutex_get
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_end
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_begin
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> miio_api.o(i.miio_instance_add_uart)
</UL>
<P><STRONG><a name="[5a]"></a>_uart_send_str</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, arch_uart.o(i._uart_send_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _uart_send_str &rArr; arch_printf_end &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_os_mutex_put
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_os_mutex_get
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_end
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_begin
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> miio_api.o(i.miio_instance_add_uart)
</UL>
<P><STRONG><a name="[59]"></a>_uart_send_str_wait_ack</STRONG> (Thumb, 238 bytes, Stack size 824 bytes, arch_uart.o(i._uart_send_str_wait_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = _uart_send_str_wait_ack &rArr; arch_printf_end &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_os_mutex_put
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_os_mutex_get
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_end
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_begin
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> miio_api.o(i.miio_instance_add_uart)
</UL>
<P><STRONG><a name="[a4]"></a>_write_ringbuff</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, miio_uart.o(i._write_ringbuff))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[bf]"></a>action_operation_decode</STRONG> (Thumb, 310 bytes, Stack size 40 bytes, action_operation_decoder.o(i.action_operation_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = action_operation_decode &rArr; miio_action_get_arguments_in &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_end
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_begin
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_operation_new
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_action_get_arguments_in
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_operation_delete
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_action_invocation
</UL>

<P><STRONG><a name="[c4]"></a>action_operation_delete</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, action_operation.o(i.action_operation_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = action_operation_delete &rArr; arguments_delete &rArr; property_value_delete &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arguments_delete
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_action_invocation
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_operation_new
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_operation_decode
</UL>

<P><STRONG><a name="[c7]"></a>action_operation_encode_param</STRONG> (Thumb, 486 bytes, Stack size 136 bytes, action_operation_encoder.o(i.action_operation_encode_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = action_operation_encode_param &rArr; str_n_cat &rArr; strncat
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_n_cat
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_action_invocation
</UL>

<P><STRONG><a name="[cc]"></a>action_operation_encode_tail</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, action_operation_encoder.o(i.action_operation_encode_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = action_operation_encode_tail &rArr; arch_printf_end &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_end
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_begin
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_action_invocation
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_code
</UL>

<P><STRONG><a name="[c0]"></a>action_operation_new</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, action_operation.o(i.action_operation_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = action_operation_new &rArr; action_operation_delete &rArr; arguments_delete &rArr; property_value_delete &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arguments_new
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_operation_delete
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_operation_decode
</UL>

<P><STRONG><a name="[db]"></a>app_func_is_ota_busy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, user_app_func.o(i.app_func_is_ota_busy))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_invoke_ota
</UL>

<P><STRONG><a name="[de]"></a>app_func_net_change</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, user_app_func.o(i.app_func_net_change))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_net_changed
</UL>

<P><STRONG><a name="[cf]"></a>app_func_restore</STRONG> (Thumb, 84 bytes, Stack size 824 bytes, user_app_func.o(i.app_func_restore))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = app_func_restore &rArr; arch_printf_end &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_end
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_begin
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_app_main
</UL>

<P><STRONG><a name="[d0]"></a>arch_mcu_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, arch_init.o(i.arch_mcu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = arch_mcu_init &rArr; uart_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_end
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_begin
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[100]"></a>arch_os_mutex_deinit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arch_os.o(i.arch_os_mutex_deinit))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_instance_destroy
</UL>

<P><STRONG><a name="[a7]"></a>arch_os_mutex_get</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arch_os.o(i.arch_os_mutex_get))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_send_str_wait_ack
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_send_str
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_send_byte
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_recv_str
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_recv_byte
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Xmodem_recv_str
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_instance_destroy
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_cmd_method_register
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_command_find_by_method
</UL>

<P><STRONG><a name="[fd]"></a>arch_os_mutex_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arch_os.o(i.arch_os_mutex_init))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_instance_create
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_uart_instance_create
</UL>

<P><STRONG><a name="[a9]"></a>arch_os_mutex_put</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arch_os.o(i.arch_os_mutex_put))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_send_str_wait_ack
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_send_str
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_send_byte
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_recv_str
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_recv_byte
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Xmodem_recv_str
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_instance_destroy
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_cmd_method_register
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_command_find_by_method
</UL>

<P><STRONG><a name="[10c]"></a>arch_ota_func</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, arch_ota.o(i.arch_ota_func))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem_recv_data
</UL>

<P><STRONG><a name="[af]"></a>arch_printf_begin</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arch_dbg.o(i.arch_printf_begin))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_func_restore
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_property_set
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_property_get
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_action_invoke
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_xmodem_create_instance
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem_print_packno_error
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem_print_header_info
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem_print_crc_error
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem_recv_data
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_send_str_wait_ack
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_send_str
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_send_byte
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_recv_str
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_instance_destroy
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_instance_create
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_command_handle_loop
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_cmd_method_register
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_property_operation
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_action_invocation
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_mcu_init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_properties
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_net_changed
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_invoke_ota
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_invoke_none
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_invoke_action
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_get_properties
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;property_operation_encode_tail
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_property_operation_decode
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_operation_encode_tail
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_operation_decode
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_uart_destroy
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_miio_cmd_ack
</UL>

<P><STRONG><a name="[b1]"></a>arch_printf_end</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, arch_dbg.o(i.arch_printf_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = arch_printf_end &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_func_restore
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_property_set
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_property_get
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_action_invoke
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_xmodem_create_instance
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem_print_packno_error
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem_print_header_info
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem_print_crc_error
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem_recv_data
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_send_str_wait_ack
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_send_str
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_send_byte
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_recv_str
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_instance_destroy
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_instance_create
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_command_handle_loop
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_cmd_method_register
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_property_operation
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_action_invocation
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_mcu_init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_properties
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_net_changed
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_invoke_ota
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_invoke_none
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_invoke_action
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_get_properties
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;property_operation_encode_tail
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_property_operation_decode
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_operation_encode_tail
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_operation_decode
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_uart_destroy
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_miio_cmd_ack
</UL>

<P><STRONG><a name="[c6]"></a>arguments_delete</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, arguments.o(i.arguments_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = arguments_delete &rArr; property_value_delete &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;property_value_delete
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_operation_delete
</UL>

<P><STRONG><a name="[ce]"></a>arguments_new</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, arguments.o(i.arguments_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = arguments_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_operation_new
</UL>

<P><STRONG><a name="[d5]"></a>atof</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, atof.o(i.atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_get_value
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_action_get_arguments_in
</UL>

<P><STRONG><a name="[d1]"></a>delay_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, delay.o(i.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_app_main
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_mcu_init
</UL>

<P><STRONG><a name="[8c]"></a>delay_ms</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, delay.o(i.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_app_main
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_2_4_On_doSet
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_recv_str
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Xmodem_recv_str
</UL>

<P><STRONG><a name="[f6]"></a>delay_us</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, delay.o(i.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem_recv_data
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_command_handle_loop
</UL>

<P><STRONG><a name="[4f]"></a>do_get_properties</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, main.o(i.do_get_properties))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = do_get_properties &rArr; execute_property_operation &rArr; miio_property_operation_decode &rArr; miio_get_value &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_property_operation
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_end
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_begin
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[52]"></a>do_invoke_action</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, main.o(i.do_invoke_action))
<BR><BR>[Stack]<UL><LI>Max Depth = 2600<LI>Call Chain = do_invoke_action &rArr; execute_action_invocation &rArr; send_error &rArr; do_req_error &rArr; send_error_code &rArr; str_n_cat &rArr; strncat
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_action_invocation
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_end
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_begin
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[4e]"></a>do_invoke_none</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, main.o(i.do_invoke_none))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = do_invoke_none &rArr; arch_printf_end &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_end
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_begin
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[51]"></a>do_invoke_ota</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, main.o(i.do_invoke_ota))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = do_invoke_ota &rArr; execute_ota_operation &rArr; xmodem_recv_data &rArr; xmodem_print_crc_error &rArr; arch_printf_end &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_ota_operation
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_end
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_begin
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_func_is_ota_busy
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[53]"></a>do_net_changed</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, main.o(i.do_net_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = do_net_changed &rArr; arch_printf_end &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_end
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_begin
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_func_net_change
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[df]"></a>do_req_error</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, miio_api.o(i.do_req_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = do_req_error &rArr; send_error_code &rArr; str_n_cat &rArr; strncat
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_code
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error
</UL>

<P><STRONG><a name="[50]"></a>do_set_properties</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, main.o(i.do_set_properties))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = do_set_properties &rArr; execute_property_operation &rArr; miio_property_operation_decode &rArr; miio_get_value &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_property_operation
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_end
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_begin
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[da]"></a>execute_action_invocation</STRONG> (Thumb, 334 bytes, Stack size 856 bytes, operation_executor.o(i.execute_action_invocation))
<BR><BR>[Stack]<UL><LI>Max Depth = 2576<LI>Call Chain = execute_action_invocation &rArr; send_error &rArr; do_req_error &rArr; send_error_code &rArr; str_n_cat &rArr; strncat
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_action_invoke
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_end
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_begin
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_n_cat
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_operation_encode_tail
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_operation_encode_param
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_operation_delete
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_operation_decode
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_send_response
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_invoke_action
</UL>

<P><STRONG><a name="[dc]"></a>execute_ota_operation</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, ota.o(i.execute_ota_operation))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = execute_ota_operation &rArr; xmodem_recv_data &rArr; xmodem_print_crc_error &rArr; arch_printf_end &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem_recv_data
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_invoke_ota
</UL>

<P><STRONG><a name="[d9]"></a>execute_property_operation</STRONG> (Thumb, 406 bytes, Stack size 864 bytes, operation_executor.o(i.execute_property_operation))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = execute_property_operation &rArr; miio_property_operation_decode &rArr; miio_get_value &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_property_set
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_property_get
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_end
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_begin
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_n_cat
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;property_operation_encode_tail
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;property_operation_encode_param
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_property_operation_delete
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_property_operation_decode
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_send_response
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_properties
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_get_properties
</UL>

<P><STRONG><a name="[4c]"></a>fputc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usart.o(i.fputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[c5]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_instance_destroy
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_property_operation
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_action_invocation
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;property_value_delete
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arguments_delete
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_property_operation_delete
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_property_operation_decode
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_operation_delete
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_operation_decode
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_comamnd_decoder
</UL>

<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 326 bytes, Stack size 824 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 2664<LI>Call Chain = main &rArr; miio_command_handle_loop &rArr; send_error &rArr; do_req_error &rArr; send_error_code &rArr; str_n_cat &rArr; strncat
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_instance_destroy
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_instance_create
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_instance_add_xmodem
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_instance_add_uart
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_command_handle_loop
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_cmd_method_register
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_end
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_begin
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_mcu_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[66]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem_recv_data
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_instance_create
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_cmd_method_register
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;property_value_new
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arguments_new
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_get_value
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_operation_new
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_property_operation_new
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_property_operation_decode
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_operation_decode
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_comamnd_decoder
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>

<P><STRONG><a name="[ee]"></a>miio_cmd_method_register</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, miio_api.o(i.miio_cmd_method_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = miio_cmd_method_register &rArr; arch_printf_end &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_os_mutex_put
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_os_mutex_get
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_end
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_begin
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ef]"></a>miio_command_handle_loop</STRONG> (Thumb, 484 bytes, Stack size 120 bytes, miio_api.o(i.miio_command_handle_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 1840<LI>Call Chain = miio_command_handle_loop &rArr; send_error &rArr; do_req_error &rArr; send_error_code &rArr; str_n_cat &rArr; strncat
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_app_main
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_end
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_begin
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_comamnd_decoder
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_command_config_arg
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_command_find_by_method
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ec]"></a>miio_instance_add_uart</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, miio_api.o(i.miio_instance_add_uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = miio_instance_add_uart &rArr; miio_uart_instance_create
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_uart_instance_create
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ed]"></a>miio_instance_add_xmodem</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, miio_api.o(i.miio_instance_add_xmodem))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = miio_instance_add_xmodem &rArr; miio_xmodem_create_instance &rArr; arch_printf_end &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_xmodem_create_instance
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[eb]"></a>miio_instance_create</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, miio_api.o(i.miio_instance_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = miio_instance_create &rArr; arch_printf_end &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_os_mutex_init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_end
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_begin
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f0]"></a>miio_instance_destroy</STRONG> (Thumb, 166 bytes, Stack size 64 bytes, miio_api.o(i.miio_instance_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = miio_instance_destroy &rArr; miio_uart_destroy &rArr; arch_printf_end &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_os_mutex_put
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_os_mutex_get
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_os_mutex_deinit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_end
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_begin
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_uart_destroy
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e5]"></a>miio_property_operation_decode</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, property_operation_decoder.o(i.miio_property_operation_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = miio_property_operation_decode &rArr; miio_get_value &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_end
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_begin
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_get_value
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_property_operation_new
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_property_operation_delete
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_property_operation
</UL>

<P><STRONG><a name="[e9]"></a>miio_property_operation_delete</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, property_operation.o(i.miio_property_operation_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = miio_property_operation_delete &rArr; property_value_delete &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;property_value_delete
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_property_operation
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_property_operation_decode
</UL>

<P><STRONG><a name="[101]"></a>miio_property_operation_new</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, property_operation.o(i.miio_property_operation_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = miio_property_operation_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_property_operation_decode
</UL>

<P><STRONG><a name="[ff]"></a>miio_uart_destroy</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, miio_uart.o(i.miio_uart_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = miio_uart_destroy &rArr; arch_printf_end &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_end
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_begin
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_instance_destroy
</UL>

<P><STRONG><a name="[fb]"></a>miio_uart_instance_create</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, miio_uart.o(i.miio_uart_instance_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = miio_uart_instance_create
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_os_mutex_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_instance_add_uart
</UL>

<P><STRONG><a name="[fc]"></a>miio_xmodem_create_instance</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, xmodem.o(i.miio_xmodem_create_instance))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = miio_xmodem_create_instance &rArr; arch_printf_end &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_end
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_begin
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_instance_add_xmodem
</UL>

<P><STRONG><a name="[e2]"></a>on_action_invoke</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, on_action_invoke.o(i.on_action_invoke))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = on_action_invoke &rArr; arch_printf_end &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_end
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_begin
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_action_invocation
</UL>

<P><STRONG><a name="[e7]"></a>on_property_get</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, on_property_get.o(i.on_property_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = on_property_get &rArr; S_2_SwitchSensor_doGet &rArr; P_2_4_On_doGet &rArr; property_value_new_boolean &rArr; property_value_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_2_SwitchSensor_doGet
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_1_DeviceInformation_doGet
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_end
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_begin
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_property_operation
</UL>

<P><STRONG><a name="[e6]"></a>on_property_set</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, on_property_set.o(i.on_property_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = on_property_set &rArr; print_value &rArr; arch_printf_end &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_2_SwitchSensor_doSet
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_end
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_begin
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_property_operation
</UL>

<P><STRONG><a name="[102]"></a>print_value</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, print_value.o(i.print_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = print_value &rArr; arch_printf_end &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_end
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_begin
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_property_set
</UL>

<P><STRONG><a name="[e8]"></a>property_operation_encode_param</STRONG> (Thumb, 352 bytes, Stack size 104 bytes, property_operation_encoder.o(i.property_operation_encode_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = property_operation_encode_param &rArr; str_n_cat &rArr; strncat
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_n_cat
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_property_operation
</UL>

<P><STRONG><a name="[ea]"></a>property_operation_encode_tail</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, property_operation_encoder.o(i.property_operation_encode_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = property_operation_encode_tail &rArr; arch_printf_end &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_end
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_begin
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_property_operation
</UL>

<P><STRONG><a name="[d4]"></a>property_value_delete</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, property_value.o(i.property_value_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = property_value_delete &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arguments_delete
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_property_operation_delete
</UL>

<P><STRONG><a name="[103]"></a>property_value_new</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, property_value.o(i.property_value_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = property_value_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;property_value_new_boolean
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;property_value_new_string
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;property_value_new_integer
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;property_value_new_float
</UL>

<P><STRONG><a name="[89]"></a>property_value_new_boolean</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, property_value.o(i.property_value_new_boolean))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = property_value_new_boolean &rArr; property_value_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;property_value_new
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_2_4_On_doGet
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_action_get_arguments_in
</UL>

<P><STRONG><a name="[f2]"></a>property_value_new_float</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, property_value.o(i.property_value_new_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = property_value_new_float &rArr; property_value_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;property_value_new
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_action_get_arguments_in
</UL>

<P><STRONG><a name="[f1]"></a>property_value_new_integer</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, property_value.o(i.property_value_new_integer))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = property_value_new_integer &rArr; property_value_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;property_value_new
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_action_get_arguments_in
</UL>

<P><STRONG><a name="[83]"></a>property_value_new_string</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, property_value.o(i.property_value_new_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = property_value_new_string &rArr; property_value_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;property_value_new
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_1_5_SerialNo_doGet
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_1_4_FirmwareRevision_doGet
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_1_3_SerialNumber_doGet
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_1_2_Model_doGet
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_1_1_Manufacturer_doGet
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_action_get_arguments_in
</UL>

<P><STRONG><a name="[e1]"></a>send_error</STRONG> (Thumb, 66 bytes, Stack size 824 bytes, miio_api.o(i.send_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720<LI>Call Chain = send_error &rArr; do_req_error &rArr; send_error_code &rArr; str_n_cat &rArr; strncat
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_req_error
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_command_handle_loop
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_action_invocation
</UL>

<P><STRONG><a name="[e0]"></a>send_error_code</STRONG> (Thumb, 74 bytes, Stack size 824 bytes, operation_executor.o(i.send_error_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = send_error_code &rArr; str_n_cat &rArr; strncat
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_n_cat
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_operation_encode_tail
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_req_error
</UL>

<P><STRONG><a name="[c9]"></a>str_n_cat</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, util.o(i.str_n_cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = str_n_cat &rArr; strncat
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_property_operation
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_action_invocation
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;property_operation_encode_param
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_operation_encode_param
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_code
</UL>

<P><STRONG><a name="[f8]"></a>uart_comamnd_decoder</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, uart_command_decoder.o(i.uart_comamnd_decoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = uart_comamnd_decoder &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_command_handle_loop
</UL>

<P><STRONG><a name="[d3]"></a>uart_init</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, usart.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = uart_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_mcu_init
</UL>

<P><STRONG><a name="[f7]"></a>user_app_main</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, user_app_main.o(i.user_app_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = user_app_main &rArr; app_func_restore &rArr; arch_printf_end &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_PWM_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_func_restore
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_command_handle_loop
</UL>

<P><STRONG><a name="[e4]"></a>xmodem_recv_data</STRONG> (Thumb, 878 bytes, Stack size 72 bytes, xmodem.o(i.xmodem_recv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xmodem_recv_data &rArr; xmodem_print_crc_error &rArr; arch_printf_end &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem_send_byte
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem_recv_str
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem_print_packno_error
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem_print_header_info
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem_print_data
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem_print_crc_error
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem_check_packno
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem_check_crc
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem_cal_data_len
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_ccitt
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_ota_func
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_end
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_begin
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_ota_operation
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[10e]"></a>crc16_ccitt</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, xmodem.o(i.crc16_ccitt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = crc16_ccitt
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem_recv_data
</UL>

<P><STRONG><a name="[10b]"></a>xmodem_cal_data_len</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, xmodem.o(i.xmodem_cal_data_len))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem_recv_data
</UL>

<P><STRONG><a name="[10f]"></a>xmodem_check_crc</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, xmodem.o(i.xmodem_check_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xmodem_check_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem_recv_data
</UL>

<P><STRONG><a name="[10d]"></a>xmodem_check_packno</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, xmodem.o(i.xmodem_check_packno))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = xmodem_check_packno
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem_recv_data
</UL>

<P><STRONG><a name="[105]"></a>xmodem_print_crc_error</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, xmodem.o(i.xmodem_print_crc_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xmodem_print_crc_error &rArr; arch_printf_end &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_end
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_begin
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem_recv_data
</UL>

<P><STRONG><a name="[106]"></a>xmodem_print_data</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, xmodem.o(i.xmodem_print_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xmodem_print_data &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem_recv_data
</UL>

<P><STRONG><a name="[107]"></a>xmodem_print_header_info</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, xmodem.o(i.xmodem_print_header_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xmodem_print_header_info &rArr; arch_printf_end &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_end
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_begin
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem_recv_data
</UL>

<P><STRONG><a name="[108]"></a>xmodem_print_packno_error</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, xmodem.o(i.xmodem_print_packno_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xmodem_print_packno_error &rArr; arch_printf_end &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_end
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_begin
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem_recv_data
</UL>

<P><STRONG><a name="[109]"></a>xmodem_recv_str</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, xmodem.o(i.xmodem_recv_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xmodem_recv_str
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem_recv_data
</UL>

<P><STRONG><a name="[10a]"></a>xmodem_send_byte</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, xmodem.o(i.xmodem_send_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xmodem_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem_recv_data
</UL>

<P><STRONG><a name="[82]"></a>P_1_1_Manufacturer_doGet</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, s_1_deviceinformation_doget.o(i.P_1_1_Manufacturer_doGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = P_1_1_Manufacturer_doGet &rArr; property_value_new_string &rArr; property_value_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;property_value_new_string
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_1_DeviceInformation_doGet
</UL>

<P><STRONG><a name="[84]"></a>P_1_2_Model_doGet</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, s_1_deviceinformation_doget.o(i.P_1_2_Model_doGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = P_1_2_Model_doGet &rArr; property_value_new_string &rArr; property_value_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;property_value_new_string
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_1_DeviceInformation_doGet
</UL>

<P><STRONG><a name="[85]"></a>P_1_3_SerialNumber_doGet</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, s_1_deviceinformation_doget.o(i.P_1_3_SerialNumber_doGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = P_1_3_SerialNumber_doGet &rArr; property_value_new_string &rArr; property_value_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;property_value_new_string
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_1_DeviceInformation_doGet
</UL>

<P><STRONG><a name="[86]"></a>P_1_4_FirmwareRevision_doGet</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, s_1_deviceinformation_doget.o(i.P_1_4_FirmwareRevision_doGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = P_1_4_FirmwareRevision_doGet &rArr; property_value_new_string &rArr; property_value_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;property_value_new_string
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_1_DeviceInformation_doGet
</UL>

<P><STRONG><a name="[87]"></a>P_1_5_SerialNo_doGet</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, s_1_deviceinformation_doget.o(i.P_1_5_SerialNo_doGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = P_1_5_SerialNo_doGet &rArr; property_value_new_string &rArr; property_value_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;property_value_new_string
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_1_DeviceInformation_doGet
</UL>

<P><STRONG><a name="[8a]"></a>P_2_4_On_doSet</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, s_2_switchsensor_doset.o(i.P_2_4_On_doSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = P_2_4_On_doSet
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_2_SwitchSensor_doSet
</UL>

<P><STRONG><a name="[88]"></a>P_2_4_On_doGet</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, s_2_switchsensor_doget.o(i.P_2_4_On_doGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = P_2_4_On_doGet &rArr; property_value_new_boolean &rArr; property_value_new &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;property_value_new_boolean
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_2_SwitchSensor_doGet
</UL>

<P><STRONG><a name="[54]"></a>_miio_cmd_ack</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, miio_api.o(i._miio_cmd_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _miio_cmd_ack &rArr; arch_printf_end &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_end
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_printf_begin
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> miio_api.o(i.send_error)
<LI> miio_api.o(i.miio_command_handle_loop)
</UL>
<P><STRONG><a name="[f4]"></a>miio_command_find_by_method</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, miio_api.o(i.miio_command_find_by_method))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = miio_command_find_by_method &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_os_mutex_put
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_os_mutex_get
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_command_handle_loop
</UL>

<P><STRONG><a name="[f9]"></a>uart_command_config_arg</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, miio_api.o(i.uart_command_config_arg))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_command_handle_loop
</UL>

<P><STRONG><a name="[e3]"></a>miio_send_response</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, operation_executor.o(i.miio_send_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = miio_send_response
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_property_operation
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_action_invocation
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_code
</UL>

<P><STRONG><a name="[c3]"></a>miio_action_get_arguments_in</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, action_operation_decoder.o(i.miio_action_get_arguments_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = miio_action_get_arguments_in &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;property_value_new_boolean
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;property_value_new_string
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;property_value_new_integer
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;property_value_new_float
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_operation_decode
</UL>

<P><STRONG><a name="[fa]"></a>miio_get_value</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, property_operation_decoder.o(i.miio_get_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = miio_get_value &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;miio_property_operation_decode
</UL>

<P><STRONG><a name="[ad]"></a>_fp_digits</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ab]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[b3]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b2]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4d]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0snprintf)
</UL>
<P><STRONG><a name="[74]"></a>_local_sscanf</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[7a]"></a>_fp_value</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
